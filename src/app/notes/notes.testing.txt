3.HTML element 
        const compElement: HTMLElement = fixture.nativeElement;
        const tag_P = compElement.querySelector('P');
        expect(tag_P?.textContent).toEqual('banner works');
        
4.Debug Element

            const d_element = fixture.debugElement;
            let postsElement = d_element.queryAll(By.css('.posts'));
            expect(postsElement.length).toBe(postList.length);


           const d_element = fixture.debugElement;
            let postsElement = d_element.queryAll(By.directive(PostComponent)); 

            for (let index = 0; index < postsElement.length; index++) {
                let postCompinstance = postsElement[index].componentInstance as PostComponent;
                expect(postCompinstance.post.title).toEqual(postList[index].title);
            }

5.SpyOn
  instant Spy 
  
   TestBed.configureTestingModule({
            declarations: [PostsComponent
            ],
            providers: [{
                provide: PostsService,
                useValue: mockPostService 
            }],  
        })

   spyOn(mockPostService, 'deletePosts').and.returnValue(of(true));

6.SpyOnObj :::::::::::::::
 add it on beforeEach as this LoggerService has addLogs
   let _loggerService = jasmine.createSpyObj(LoggerService, ['addLogs']);
    _httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']); 

   then use this as with return Value wherever u want
   _loggerService.get.and.returnValue(of(true));
   _httpClientSpy.get.and.returnValue(of(postList));

:::::::::::::::::::::::::::

7. fixture
  gives the all the Html content,ts properties of component

  let fixture: ComponentFixture<PostsComponent>;

  after beforeeach
  fixture = TestBed.createComponent(PostsComponent);
  postComponent = fixture.componentInstance;

8.  Service inject

  let _loggerService = jasmine.createSpyObj(LoggerService, ['addLogs']);
  TestBed.configureTestingModule({
    providers: [CommonService, {
      provide: LoggerService,
      useValue: _loggerService
    }]
  })

  const _commonService = TestBed.inject(CommonService);
  const loggerServiceSpy = TestBed.inject(LoggerService) as jasmine.SpyObj<LoggerService>;


